/*
    It looks like you're using ngModel on the same form field as formControlName.
    Support for using the ngModel input property and ngModelChange event with
    reactive form directives has been deprecated in Angular v6 and will be removed
    in Angular v7.

    For more information on this, see our API docs here:
    https://angular.io/api/forms/FormControlName#use-with-ngmodel
*/
import { Component, OnInit } from '@angular/core';

import { AccountService } from 'app/core';
import { PasswordService } from './password.service';

import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';

import { CustomErrorStateMatcher } from '../../shared/custom-error-state-matcher';

@Component({
    selector: 'jhi-password',
    templateUrl: './password.component.html',
    styleUrls: ['./password.component.scss']
})
export class PasswordComponent implements OnInit {
    doNotMatch: string;
    error: string;
    success: string;
    account: any;
    currentPassword: string;
    newPassword: string;
    confirmPassword: string;

    hide = true;

    // FormControl
    esMatcher = new CustomErrorStateMatcher();
    formFC: FormGroup;

    constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}

    ngOnInit() {
        this.formFC = this.fb.group({
            currentPassword: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]),
            newPassword: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]),
            confirmPassword: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(50)])
        });
        this.accountService.identity().then(account => {
            this.account = account;
        });
    }

    changePassword() {
        if (this.newPassword !== this.confirmPassword) {
            this.error = null;
            this.success = null;
            this.doNotMatch = 'ERROR';
        } else {
            this.doNotMatch = null;
            this.passwordService.save(this.newPassword, this.currentPassword).subscribe(
                () => {
                    this.error = null;
                    this.success = 'OK';
                    /*
                    this.formFC.reset();
                    this.currentPassword = '';
                    this.newPassword = '';
                    this.confirmPassword = '';
                    */
                },
                () => {
                    this.success = null;
                    this.error = 'ERROR';
                }
            );
        }
    }
}
