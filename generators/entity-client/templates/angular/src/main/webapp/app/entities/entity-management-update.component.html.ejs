<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<div class="row justify-content-center">
    <div class="col-8">
        <form id="editFrom" novalidate (ngSubmit)="save()" [formGroup]="formFC">
            <h2 id="<%= jhiPrefixDashed %>-<%= entityFileName %>-heading" jhiTranslate="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClassHumanized %></h2>
            <div>
                <<%= jhiPrefixDashed %>-alert-error></<%= jhiPrefixDashed %>-alert-error>
                <mat-form-field appearance="fill" class="form-input-field" [hidden]="!<%=entityInstance %>.id">
                        <mat-label jhiTranslate="global.field.id">ID</mat-label>
                        <input matInput
                            type="text"
                            class="form-input-field"
                            name="id"
                            id="field_id"
                            formControlName="id"
                            [(ngModel)]="<%=entityInstance %>.id"
                            readonly />
                </mat-form-field>

                <%_ for (idx in fields) {
                    const fieldName = fields[idx].fieldName;
                    const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
                    const fieldNameHumanized = fields[idx].fieldNameHumanized;
                    const fieldType = fields[idx].fieldType;
                    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
                    let fieldInputType = 'text';
                    let ngModelOption = '';
                    const translationKey = `${i18nKeyPrefix}.${fieldName}`;
                    if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
                        fieldInputType = 'number';

//                  } else if (fieldType === 'LocalDate') {
//                        fieldInputType = 'date';
//                  } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
//                        fieldInputType = 'datetime-local';

                    } else if (['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType)) {
                        fieldInputType = 'datetime-local';

                    } else if (fieldType === 'Boolean') {
                        fieldInputType = 'checkbox';
                    } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
                        fieldInputType = 'hidden';
                    }
                _%>

                <%_ if (fieldInputType === 'checkbox') { _%>
                    <!-- TODO add indeterminate state -->
                    <mat-checkbox 
                        class="form-input-field"
                        id="field_<%= fieldName %>"
                        name="<%= fieldName %>"
                        [errorStateMatcher]="esMatcher"
                        formControlName="<%= fieldName %>"
                        [(ngModel)]="<%= entityInstance %>.<%= fieldName %>"
                        <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) { %>required<% } %>
                        <%- include ng_validators %>
                    ><% if (enableTranslation) { %><span class="form-input-field-label" jhiTranslate="<%= translationKey %>"><%= fieldNameHumanized %></span><% } else { %><%= fieldNameHumanized %><% } %></mat-checkbox>

                <%_ } else { _%>

                    <mat-form-field appearance="standard" class="form-input-field"
                    <% if (fields[idx].javadoc) { if (enableTranslation) { %> [matTooltip]="'<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate"<% } else { %> ngbTooltip="<%= fields[idx].javadoc %>"<% } } %>
                    >
                        <mat-label class="form-input-field-label" jhiTranslate="<%= translationKey %>"><%= fieldNameHumanized %></mat-label>
                    <%_ if (fields[idx].fieldIsEnum) { _%>
                        <mat-select
                            class="form-input-field"
                            id="field_<%= fieldName %>"
                            name="<%= fieldName %>"
                            formControlName="<%= fieldName %>"
                            [(ngModel)]="<%= entityInstance %>.<%= fieldName %>"
                            <%- include ng_validators %>
                            >
                            <%_ const enumPrefix = angularAppName + '.'+ fieldType;
                            const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
                            for (key in values) {
                                const value = values[key]; _%>
                            <mat-option value="<%= value %>"><% if (enableTranslation) { %>{{'<%=enumPrefix%>.<%=value%>' | translate}}<% } else { %><%=value%><% } %></mat-option>
                            <%_ } _%>
                        </mat-select>
                    <%_ } else { _%>
                    <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                    <div>
                        <%_ if (fieldTypeBlobContent === 'image') { _%>
                        <img [src]="'data:' + <%=entityInstance %>.<%=fieldName%>ContentType + ';base64,' + <%=entityInstance %>.<%=fieldName%>" style="max-height: 100px;" *ngIf="<%= entityInstance %>.<%= fieldName %>" alt="<%=entityInstance %> image"/>
                        <%_ } _%>
                        <div *ngIf="<%= entityInstance %>.<%= fieldName %>" class="form-text text-danger clearfix">
                            <%_ if (fieldTypeBlobContent === 'any') { _%>
                            <a class="pull-left" (click)="openFile(<%= entityInstance %>.<%= fieldName %>ContentType, <%= entityInstance %>.<%= fieldName %>)" jhiTranslate="entity.action.open">open</a><br>
                            <span class="pull-left">{{<%= entityInstance %>.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>.<%= fieldName %>)}}</span>
                            <%_ } else { _%>
                            <span class="pull-left">{{<%= entityInstance %>.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>.<%= fieldName %>)}}</span>
                            <%_ } _%>
                            <%_ if (fieldTypeBlobContent === 'image') { _%>
                            <button type="button" (click)="clearInputImage('<%= fieldName %>', '<%= fieldName %>ContentType', 'fileImage')" class="btn btn-secondary btn-xs pull-right">
                            <%_ } else { _%>
                            <button type="button" (click)="<%= entityInstance %>.<%= fieldName %>=null;<%= entityInstance %>.<%= fieldName %>ContentType=null;"
                                    class="btn btn-secondary btn-xs pull-right">
                            <%_ } _%>
                                <fa-icon [icon]="'times'"></fa-icon>
                            </button>
                        </div>
                        <input type="file" id="file_<%= fieldName %>" (change)="setFileData($event, <%= entityInstance %>, '<%= fieldName %>', <% if (fieldTypeBlobContent === 'image') { %>true)" accept="image/*" jhiTranslate="entity.action.addimage"<% } else { %>false)" jhiTranslate="entity.action.addblob"<% } %>/>
                    </div>
                    <%_ } _%>

                    <%_ if (['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType)) { _%>
                        <input matInput
                            type="<%= fieldInputType %>"
                            class="form-input-field"
                            id="field_<%= fieldName %>"
                            name="<%= fieldName %>"
                            formControlName="<%= fieldName %>"
                            [errorStateMatcher]="esMatcher"
                            [(ngModel)]="<%= fieldName %>"
                            <% if (fields[idx].javadoc) { if (enableTranslation) { %> placeholder="{{ '<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate }}"<% } else { %> placeholder="<%= fields[idx].javadoc %>"<% } } %>
                            <%- include ng_validators %>
                            [matDatepicker]="datepicker_<%= fieldName %>"
                        />
                        <mat-datepicker-toggle matSuffix [for]="datepicker_<%= fieldName %>"></mat-datepicker-toggle>
                        <mat-datepicker #datepicker_<%= fieldName %>></mat-datepicker>

                    <%_ } else if (fieldTypeBlobContent === 'text') { _%>
                    <textarea matInput
                        class="form-input-field"
                        name="<%= fieldName %>"
                        id="field_<%= fieldName %>"
                        formControlName="<%= fieldName %>"
                        [errorStateMatcher]="esMatcher"
                        [(ngModel)]="<%= entityInstance %>.<%= fieldName %>"
                        <% if (fields[idx].javadoc) { if (enableTranslation) { %>placeholder="{{ '<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate }}"<% } else { %>placeholder="<%= fields[idx].javadoc %>"<% } } %>
                        cdkTextareaAutosize
                        cdkAutosizeMinRows="3"
                        cdkAutosizeMaxRows="10"
                        <%- include ng_validators %>
                        ></textarea>
                    <%_ } else { _%>
                    <input matInput
                            type="<%= fieldInputType %>"
                            class="form-input-field"
                            id="field_<%= fieldName %>"
                            name="<%= fieldName %>"
                            formControlName="<%= fieldName %>"
                            [errorStateMatcher]="esMatcher"
                            [(ngModel)]="<%= entityInstance %>.<%= fieldName %>"
                            <% if (fields[idx].javadoc) { if (enableTranslation) { %>placeholder="{{ '<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate }}"<% } else { %>placeholder="<%= fields[idx].javadoc %>"<% } } %>
                            <%- include ng_validators %>
                            />
                        <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                        <input type="hidden" class="form-input-field" name="<%= fieldName %>ContentType" id="field_<%= fieldName %>ContentType"
                            [(ngModel)]="<%= entityInstance %>.<%= fieldName %>ContentType" />
                        <%_ } _%>
                    <%_ } _%>
                    <%_ } _%>
                    <%_ if (fields[idx].fieldValidate === true) { _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('required')"
                            jhiTranslate="entity.validation.required">
                            This field is required.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('minlength')"
                            jhiTranslate="entity.validation.minlength"
                            [translateValues]="{ min: <%= fields[idx].fieldValidateRulesMinlength %> }">                    
                        This field is required to be at least <%= fields[idx].fieldValidateRulesMinlength %> characters.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('maxlength')"
                            jhiTranslate="entity.validation.maxlength"
                            [translateValues]="{ max: <%= fields[idx].fieldValidateRulesMaxlength %> }">
                        This field cannot be longer than <%= fields[idx].fieldValidateRulesMaxlength %> characters.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('min')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('min')"
                            jhiTranslate="entity.validation.min"
                            [translateValues]="{ min: <%= fields[idx].fieldValidateRulesMin %> }">
                            This field should be at least <%= fields[idx].fieldValidateRulesMin %>.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('max')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('max')"
                            jhiTranslate="entity.validation.max"
                            [translateValues]="{ max: <%= fields[idx].fieldValidateRulesMax %> }">
                            This field cannot be more than <%= fields[idx].fieldValidateRulesMax %>.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('minbytes')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('minbytes')"
                            jhiTranslate="entity.validation.minbytes" [translateValues]="{ min: <%= fields[idx].fieldValidateRulesMinbytes %> }">
                            This field should be at least <%= fields[idx].fieldValidateRulesMinbytes %>.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('maxbytes')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('maxbytes')"
                            jhiTranslate="entity.validation.maxbytes" [translateValues]="{ max: <%= fields[idx].fieldValidateRulesMaxbytes %> }">
                            This field cannot be more than <%= fields[idx].fieldValidateRulesMaxbytes %>.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (fields[idx].fieldValidateRules.includes('pattern')) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('pattern')"
                            jhiTranslate="entity.validation.pattern" [translateValues]="{ pattern: '<%= fields[idx].fieldValidateRulesPattern %>' }">
                            <!--
                            This field should follow pattern for "<%= fields[idx].fieldValidateRulesPattern %>". SHOULD BE ESCAPTED
                            -->
                        </mat-error>
                        <%_ } _%>
                        <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('number')"
                            jhiTranslate="entity.validation.number">
                            This field should be a number.
                        </mat-error>
                        <%_ } _%>
                        <%_ if (['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType)) { _%>
                        <mat-error *ngIf="formFC.get('<%= fieldName %>').hasError('ZonedDateTimelocal')"
                            jhiTranslate="entity.validation.datetimelocal">
                            This field should be a date and time.
                        </mat-error>
                        <%_ } _%>
                    <%_ } _%>
                </mat-form-field>

                <%_ } _%>

                <%_ } _%>


                <%_ for (idx in relationships) {
                const relationshipType = relationships[idx].relationshipType;
                const ownerSide = relationships[idx].ownerSide;
                const otherEntityName = relationships[idx].otherEntityName;
                const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
                const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
                const relationshipName = relationships[idx].relationshipName;
                const relationshipNameHumanized = relationships[idx].relationshipNameHumanized;
                const relationshipFieldName = relationships[idx].relationshipFieldName;
                const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
                const otherEntityField = relationships[idx].otherEntityField;
                const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized;
                const relationshipRequired = relationships[idx].relationshipRequired;
                const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>
                <%_ if (relationshipType !== 'one-to-many' ) { _%>
                <mat-form-field appearance="standard" class="form-input-field">
                    <mat-label class="form-input-rel-label" jhiTranslate="<%= translationKey %>" for="field_<%= relationshipName %>"><%= relationshipNameHumanized %></mat-label>        
                <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true && otherEntityName === 'user')) { _%>
                    <!-- many-to-one || one-to-one' && ownerSide && otherEntityName === 'user' -->
                    <%_ if (dto === 'no') { _%>
                    <!-- NODTO -->
                    <mat-select
                            class="form-input-rel"
                            id="rel_<%= relationshipName %>"
                            name="<%= relationshipName %>"
                            [errorStateMatcher]="esMatcher"
                            formControlName="<%= relationshipName %>Id"
                            [(ngModel)]="<%= entityInstance %>.<%=relationshipFieldName %>"
                            <% if (relationshipRequired) { %> required<% } %>
                            >
                        <%_ if (!relationshipRequired) { _%>
                        <!-- NOTREQUIRED -->
                        <mat-option [value]="null"></mat-option>
                        <%_ } else { _%>
                        <!-- REQUIRED -->
                        <mat-option *ngIf="!editForm.value.<%= relationshipName %>" [value]="null" selected></mat-option>
                        <%_ } _%>
                        <mat-option [value]="<%=otherEntityName %>Option.id === <%= entityInstance %>.<%=relationshipFieldName %>?.id ? <%= entityInstance %>.<%=relationshipFieldName %> : <%=otherEntityName %>Option" *ngFor="let <%=otherEntityName %>Option of <%=otherEntityNamePlural.toLowerCase() %>; trackBy: track<%=otherEntityNameCapitalized %>ById">{{<%=otherEntityName %>Option.<%=otherEntityField %>}}</mat-option>
                    </mat-select>
                    <%_ } else { _%>
                    <!-- DTO -->
                    <mat-select
                        class="form-input-field"
                        id="rel_<%= relationshipName %>"
                        name="<%= relationshipName %>"
                        [errorStateMatcher]="esMatcher"
                        formControlName="<%= relationshipName %>Id"
                        [(ngModel)]="<%= entityInstance %>.<%=relationshipFieldName %>Id"
                        <% if (relationshipRequired) { %> required<% } %>
                        >
                        <%_ if (!relationshipRequired) { _%>
                        <mat-option [value]="null"></mat-option>
                        <%_ } else { _%>
                        <mat-option *ngIf="!editForm.value.<%= relationshipName %>" [value]="null" selected></mat-option>
                        <%_ } _%>
                        <mat-option [value]="<%=otherEntityName %>Option.id" *ngFor="let <%=otherEntityName %>Option of <%=otherEntityNamePlural.toLowerCase() %>; trackBy: track<%=otherEntityNameCapitalized %>ById">{{<%=otherEntityName %>Option.<%=otherEntityField %>}}</mat-option>
                    </mat-select>
                    <%_ } _%>
                <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true) { _%>
                    <!--  one-to-one -->
                    <%_ if (dto === 'no') { _%>
                    <!-- NODTO -->
                    <mat-select
                        class="form-input-rel"
                        id="rel_<%= relationshipName %>"
                        name="<%= relationshipName %>"
                        [errorStateMatcher]="esMatcher"
                        formControlName="<%= relationshipName %>Id"
                        [(ngModel)]="<%= entityInstance %>.<%=relationshipFieldName %>"
                        <% if (relationshipRequired) { %>required<% } %>
                        >
                        <%_ if (!relationshipRequired) { _%>
                        <!-- NOTREQUIRED -->
                        <mat-option [ngValue]="null"></mat-option>
                        <%_ } else { _%>
                        <!-- REQUIRED -->
                        <mat-option *ngIf="!editForm.value.<%= relationshipName %>" [value]="null" selected></mat-option>
                        <%_ } _%>
                        <mat-option [value]="<%=otherEntityName %>Option.id === <%= entityInstance %>.<%=relationshipFieldName %>?.id ? <%= entityInstance %>.<%=relationshipFieldName %> : <%=otherEntityName %>Option" *ngFor="let <%=otherEntityName %>Option of <%=relationshipFieldNamePlural.toLowerCase() %>; trackBy: track<%=otherEntityNameCapitalized %>ById">{{<%=otherEntityName %>Option.<%=otherEntityField %>}}</mat-option>
                    </mat-select>
                    <%_ } else { _%>
                    <!-- DTO -->
                    <mat-select
                        class="form-input-rel"
                        id="rel_<%= relationshipName %>"
                        formControlName="<%= relationshipName %>Id"
                        name="<%= relationshipName %>"
                        [errorStateMatcher]="esMatcher"
                        [(ngModel)]="<%= entityInstance %>.<%=relationshipFieldName %>Id"
                        <% if (relationshipRequired) { %>required<% } %>
                        >
                        <%_ if (!relationshipRequired) { _%>
                        <!-- NOTREQUIRED -->
                        <mat-option [value]="null"></mat-option>
                        <%_ } else { _%>
                        <!-- REQUIRED -->
                        <mat-option *ngIf="!editForm.value.<%= relationshipName %>" [value]="null" selected></mat-option>
                        <%_ } _%>
                        <mat-option [value]="<%=otherEntityName %>Option.id" *ngFor="let <%=otherEntityName %>Option of <%=relationshipFieldNamePlural.toLowerCase() %>; trackBy: track<%=otherEntityNameCapitalized %>ById">{{<%=otherEntityName %>Option.<%=otherEntityField %>}}</mat-option>
                    </mat-select>
                    <%_ } _%>
                <%_ } else if (relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) { _%>
                    <!-- many-to-one || one-to-one' && ownerSide -->
                    <mat-select
                        multiple
                        class="form-input-rel"
                        id="rel_<%= relationshipName %>"
                        name="<%= relationshipName %>"
                        [errorStateMatcher]="esMatcher"
                        formControlName="<%= relationshipName %>Id"
                        [(ngModel)]="<%=entityInstance %>.<%=relationshipFieldNamePlural %>"
                        <% if (relationshipRequired) { %>required<% } %>
                        >
                        <mat-option [value]="getSelected(<%=entityInstance %>.<%=relationshipFieldNamePlural %>, <%=otherEntityName %>Option)" *ngFor="let <%=otherEntityName %>Option of <%=otherEntityNamePlural.toLowerCase() %>; trackBy: track<%=otherEntityNameCapitalized %>ById">{{<%=otherEntityName %>Option.<%=otherEntityField %>}}</mat-option>
                    </mat-select>
                <%_ } _%>
    
                <%_ if (relationships[idx].relationshipValidate === true) { _%>
                    <%_ if (relationshipRequired) { _%>
                    <mat-error *ngIf="formFC.get('<%= relationshipName %>').hasError('required')"
                            jhiTranslate="entity.validation.required">
                            This field is required.
                    </mat-error>
                    <%_ } _%>

                <%_ } _%>
            </mat-form-field>
            <%_ } _%>
        <%_ } _%>
            </div>
            <div>
                <button
                    mat-raised-button
                    class="form-button"
                    type="button"
                    id="cancel-save"
                    (click)="previousState()"
                    >
                    <mat-icon matSuffix>not_interested</mat-icon>&nbsp;<span
                            jhiTranslate="entity.action.cancel">Cancel</span>
                </button>
                <button
                    mat-raised-button
                    class="form-button"
                    type="submit"
                    id="save-entity"
                    color="warn"
                    [disabled]="formFC.invalid"
                    >
                    <mat-icon matSuffix>save</mat-icon>&nbsp;<span
                            jhiTranslate="entity.action.save">Save</span>
                </button>
            </div>
        </form>
    </div>
</div>
