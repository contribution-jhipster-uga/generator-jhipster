<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const query = generateEntityQueries(relationships, entityInstance, dto);
const queries = query.queries;
const variables = query.variables;
let hasManyToMany = query.hasManyToMany;
_%>
import { Component, OnInit<% if (fieldsContainImageBlob) { %>, ElementRef<% } %> } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';

import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { CustomErrorStateMatcher } from '../../shared/custom-error-state-matcher';

<%_ if ( fieldsContainDate ) { _%>
import * as moment from 'moment';
    <%_ if ( fieldsContainInstant || fieldsContainZonedDateTime ) { _%>
import { DATE_TIME_FORMAT } from 'app/shared/constants/input.constants';
    <%_ } _%>
<%_ } _%>
<%_ if (queries && queries.length > 0 || fieldsContainBlob) { _%>
import { <% if (queries && queries.length > 0) { %>JhiAlertService, <% } %><% if (fieldsContainBlob) { %>JhiDataUtils<% } %> } from 'ng-jhipster';
<%_ } _%>
import { I<%= entityAngularName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';
<%_
let hasRelationshipQuery = false;
Object.keys(differentRelationships).forEach(key => {
    const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
        (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
            || rel.relationshipType !== 'one-to-many'
    );
    if (hasAnyRelationshipQuery) {
        hasRelationshipQuery = true;
    }
    if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
            if (uniqueRel.otherEntityAngularName === 'User') {
_%>
import { I<%= uniqueRel.otherEntityAngularName %>, <%= uniqueRel.otherEntityAngularName%>Service } from 'app/core';
<%_         } else { _%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
import { <%= uniqueRel.otherEntityAngularName%>Service } from 'app/entities/<%= uniqueRel.otherEntityPath %>';
<%_         }
        }
    }
}); _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update',
    templateUrl: './<%= entityFileName %>-update.component.html'
    , styleUrls: ['./<%= entityFileName %>-update.component.scss']
})
export class <%= entityAngularName %>UpdateComponent implements OnInit {

    <%= entityInstance %>: I<%= entityAngularName %>;
    isSaving: boolean;

    // FormControl
    esMatcher = new CustomErrorStateMatcher();
    formFC: FormGroup;

    <%_
    for ( const idx in variables ) { %>
    <%- variables[idx] %>
    <%_ } _%>
    <%_ for ( idx in fields ) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType; _%>
    <%_ if ( ['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType) ) { _%>
        <%= fieldName %>: string;
      <%_ } _%>
    <%_ } _%>

    constructor(
        <%_ if (fieldsContainBlob) { _%>
        protected dataUtils: JhiDataUtils,
        <%_ } _%>
        <%_ if (queries && queries.length > 0) { _%>
        protected jhiAlertService: JhiAlertService,
        <%_ } _%>
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
        <%_ Object.keys(differentRelationships).forEach(key => {
            if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
                const uniqueRel = differentRelationships[key][0];
                if (uniqueRel.otherEntityAngularName !== entityAngularName) { _%>
        protected <%= uniqueRel.otherEntityName %>Service: <%= uniqueRel.otherEntityAngularName %>Service,
        <%_
                }
            }
        }); _%>
        <%_ if (fieldsContainImageBlob) { _%>
        protected elementRef: ElementRef,
        <%_ } _%>
        protected activatedRoute: ActivatedRoute,
        private fb: FormBuilder

    ) {
    }

    ngOnInit() {
        const g = {};
        g.id = new FormControl('', []);
        <%_ for (idx in fields) {
            const fieldName = fields[idx].fieldName;
            const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
            const fieldNameHumanized = fields[idx].fieldNameHumanized;
            const fieldType = fields[idx].fieldType;
            const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
            let fieldInputType = 'text';
            let ngModelOption = '';
            const translationKey = `${i18nKeyPrefix}.${fieldName}`;
            if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
                fieldInputType = 'number';
            } else if (fieldType === 'LocalDate') {
                fieldInputType = 'date';
            } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
                fieldInputType = 'datetime-local';
            } else if (fieldType === 'Boolean') {
                fieldInputType = 'checkbox';
            } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
                fieldInputType = 'hidden';
            }
        _%>
            <%_ if (fields[idx].fieldValidate === true) { _%>
                {
                    const v = [];
                    <%_ if (fields[idx].fieldValidateRules.includes('required')) { _%>
                        v.push(Validators.required);
                    <%_ }  _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('minlength')) { _%>
                        v.push(Validators.minLength(<%= fields[idx].fieldValidateRulesMinlength %>));
                    <%_ }  _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('maxlength')) { _%>
                        v.push(Validators.maxLength(<%= fields[idx].fieldValidateRulesMaxlength %>));
                    <%_ }  _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('min')) { _%>
                        v.push(Validators.min(<%= fields[idx].fieldValidateRulesMin %>));
                    <%_ } _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('max')) { _%>
                        v.push(Validators.max(<%= fields[idx].fieldValidateRulesMax %>));
                    <%_ } _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('minbytes')) { _%>
                        v.push(Validators.minbytes(<%= fields[idx].fieldValidateRulesMinbytes %>));
                    <%_ } _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('maxbytes')) { _%>
                        v.push(Validators.maxbytes(<%= fields[idx].fieldValidateRulesMaxbytes %>));
                    <%_ } _%>
                    <%_ if (fields[idx].fieldValidateRules.includes('pattern')) { _%>
                        v.push(Validators.pattern('<%= fields[idx].fieldValidateRulesPattern %>'));
                    <%_ } _%>
                    <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                        //v.push(Validators.number); TODO custom validator for number
                        v.push(Validators.pattern('[0-9]*'));
                    <%_ } _%>
                    <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                        // TODO ZonedDateTime
                    <%_ } _%>
                    
                    g.<%= fieldName %> = new FormControl('', v  );
                }
            <%_ } else { _%>
                g.<%= fieldName %> = new FormControl('', []);
            <%_ } _%>

        <%_ }  _%>

        <%_ for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType;
            const ownerSide = relationships[idx].ownerSide;
            const otherEntityName = relationships[idx].otherEntityName;
            const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
            const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
            const relationshipName = relationships[idx].relationshipName;
            const relationshipNameHumanized = relationships[idx].relationshipNameHumanized;
            const relationshipFieldName = relationships[idx].relationshipFieldName;
            const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
            const otherEntityField = relationships[idx].otherEntityField;
            const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized;
            const relationshipRequired = relationships[idx].relationshipRequired;
            const translationKey = `${i18nKeyPrefix}.${relationshipName}`; _%>

            <%_ if (relationships[idx].relationshipValidate === true) { _%>
                {
                    const v = [];
                    <%_ if (relationshipRequired) { _%>
                        v.push(Validators.required);
                    <%_ }  _%>
                    g.<%= relationshipName %>Id = new FormControl('', v  );
                }
            <%_ } else { _%>
                g.<%= relationshipName %>Id = new FormControl('', []);
            <%_ } _%>

        <%_ }  _%>
        
        this.formFC = this.fb.group(g);    

        this.isSaving = false;
        this.activatedRoute.data.subscribe(({<%= entityInstance %>}) => {
            this.<%= entityInstance %> = <%= entityInstance %>;
<%_ for (idx in fields) {
    const fieldName = fields[idx].fieldName;
    const fieldType = fields[idx].fieldType;
    if (['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType)) { _%>
            this.<%= fieldName %> = this.<%= entityInstance %>.<%= fieldName %> != null ? this.<%= entityInstance %>.<%= fieldName %>.format(DATE_TIME_FORMAT) : null;
    <%_ } _%>
<%_ } _%>
        });
        <%_ for (idx in queries) { _%>
        <%- queries[idx] %>
        <%_ } _%>
    }

    <%_ if (fieldsContainBlob) { _%>
    byteSize(field) {
        return this.dataUtils.byteSize(field);
    }

    openFile(contentType, field) {
        return this.dataUtils.openFile(contentType, field);
    }

    setFileData(event, entity, field, isImage) {
        this.dataUtils.setFileData(event, entity, field, isImage);
    }

    <%_ if (fieldsContainImageBlob) { _%>
    clearInputImage(field: string, fieldContentType: string, idInput: string) {
        this.dataUtils.clearInputImage(this.<%= entityInstance %>, this.elementRef, field, fieldContentType, idInput);
    }

    <%_ } _%>
    <%_ } _%>
    previousState() {
        window.history.back();
    }

    save() {
        this.isSaving = true;
        <%_ for (idx in fields) {
            const fieldName = fields[ idx ].fieldName;
            const fieldType = fields[idx].fieldType;
            if ([ 'Instant', 'ZonedDateTime' ].includes(fieldType)) { _%>
                this.<%= entityInstance %>.<%= fieldName %> = this.<%= fieldName %> != null ? moment(this.<%= fieldName %>, DATE_TIME_FORMAT) : null;
        <%_ }
        } _%>
        if (this.<%= entityInstance %>.id !== undefined) {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.update(this.<%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.create(this.<%= entityInstance %>));
        }
    }

    protected subscribeToSaveResponse(result: Observable<HttpResponse<I<%= entityAngularName %>>>) {
        result.subscribe((res: HttpResponse<I<%= entityAngularName %>>) =>
            this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());
    }

    protected onSaveSuccess() {
        this.isSaving = false;
        this.previousState();
    }

    protected onSaveError() {
        this.isSaving = false;
    }
    <%_ if (queries && queries.length > 0) { _%>

    protected onError(errorMessage: string) {
        this.jhiAlertService.error(errorMessage, null, null);
    }
    <%_ } _%>
    <%_
    const entitiesSeen = [];
    for (idx in relationships) {
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        if (relationships[idx].relationshipType !== 'one-to-many' && !entitiesSeen.includes(otherEntityNameCapitalized)) {
    _%>

    track<%= otherEntityNameCapitalized %>ById(index: number, item: I<%= relationships[idx].otherEntityAngularName %>) {
        return item.id;
    }
    <%_ entitiesSeen.push(otherEntityNameCapitalized); } } _%>
    <%_ if (hasManyToMany) { _%>

    getSelected(selectedVals: Array<any>, option: any) {
        if (selectedVals) {
            for (let i = 0; i < selectedVals.length; i++) {
                if (option.id === selectedVals[i].id) {
                    return selectedVals[i];
                }
            }
        }
        return option;
    }
    <%_ } _%>
}
